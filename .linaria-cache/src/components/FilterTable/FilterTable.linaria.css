.s1cxy1dy{padding:1rem;}.s1cxy1dy table{border-spacing:0;border:1px solid black;}.s1cxy1dy table tr:last-child td{border-bottom:0;}.s1cxy1dy table th,.s1cxy1dy table td{margin:0;padding:0.5rem;border-bottom:1px solid black;border-right:1px solid black;}.s1cxy1dy table th:last-child,.s1cxy1dy table td:last-child{border-right:0;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0ZpbHRlclRhYmxlL0ZpbHRlclRhYmxlLmpzIl0sIm5hbWVzIjpbIi5zMWN4eTFkeSJdLCJtYXBwaW5ncyI6IkFBV01BIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL0ZpbHRlclRhYmxlL0ZpbHRlclRhYmxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZU1lbW99IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gXCJsaW5hcmlhL3JlYWN0XCI7XG5pbXBvcnQge1xuICB1c2VUYWJsZSxcbiAgdXNlRmlsdGVycyxcbiAgdXNlR2xvYmFsRmlsdGVyLFxufSBmcm9tIFwicmVhY3QtdGFibGVcIjtcbmltcG9ydCB7U2xpZGVyQ29sdW1uRmlsdGVyLCBOdW1iZXJSYW5nZUNvbHVtbkZpbHRlciwgU2VsZWN0Q29sdW1uRmlsdGVyLCBmaWx0ZXJHcmVhdGVyVGhhbiwgR2xvYmFsRmlsdGVyLCBmdXp6eVRleHRGaWx0ZXJGbiwgRGVmYXVsdENvbHVtbkZpbHRlciwgTUFYX0lURU1TfSBmcm9tICcuL2ZpbHRlcnMnO1xuXG5pbXBvcnQgbWFrZURhdGEgZnJvbSBcIi4vbWFrZURhdGFcIjtcblxuY29uc3QgU3R5bGVzID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMXJlbTtcblxuICB0YWJsZSB7XG4gICAgYm9yZGVyLXNwYWNpbmc6IDA7XG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG5cbiAgICB0ciB7XG4gICAgICA6bGFzdC1jaGlsZCB7XG4gICAgICAgIHRkIHtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGgsXG4gICAgdGQge1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMC41cmVtO1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7XG5cbiAgICAgIDpsYXN0LWNoaWxkIHtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuXG4vLyBMZXQgdGhlIHRhYmxlIHJlbW92ZSB0aGUgZmlsdGVyIGlmIHRoZSBzdHJpbmcgaXMgZW1wdHlcbi8vZnV6enlUZXh0RmlsdGVyRm4uYXV0b1JlbW92ZSA9IHZhbCA9PiAhdmFsXG5cbi8vIE91ciB0YWJsZSBjb21wb25lbnRcbmZ1bmN0aW9uIFRhYmxlKHtjb2x1bW5zLCBkYXRhfSkge1xuICBjb25zdCBmaWx0ZXJUeXBlcyA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIC8vIEFkZCBhIG5ldyBmdXp6eVRleHRGaWx0ZXJGbiBmaWx0ZXIgdHlwZS5cbiAgICAgIGZ1enp5VGV4dDogZnV6enlUZXh0RmlsdGVyRm4sXG4gICAgICAvLyBPciwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdGV4dCBmaWx0ZXIgdG8gdXNlXG4gICAgICAvLyBcInN0YXJ0V2l0aFwiXG4gICAgICB0ZXh0OiAocm93cywgaWQsIGZpbHRlclZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiByb3dzLmZpbHRlcigocm93KSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm93VmFsdWUgPSByb3cudmFsdWVzW2lkXTtcblxuICAgICAgICAgIHJldHVybiByb3dWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyBTdHJpbmcocm93VmFsdWUpXG4gICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgIC5zdGFydHNXaXRoKFN0cmluZyhmaWx0ZXJWYWx1ZSkudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pLFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3QgZGVmYXVsdENvbHVtbiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIC8vIExldCdzIHNldCB1cCBvdXIgZGVmYXVsdCBGaWx0ZXIgVUlcbiAgICAgIEZpbHRlcjogRGVmYXVsdENvbHVtbkZpbHRlcixcbiAgICB9KSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IHtcbiAgICBnZXRUYWJsZVByb3BzLFxuICAgIGdldFRhYmxlQm9keVByb3BzLFxuICAgIGhlYWRlckdyb3VwcyxcbiAgICByb3dzLFxuICAgIHByZXBhcmVSb3csXG4gICAgc3RhdGUsXG4gICAgdmlzaWJsZUNvbHVtbnMsXG4gICAgcHJlR2xvYmFsRmlsdGVyZWRSb3dzLFxuICAgIHNldEdsb2JhbEZpbHRlcixcbiAgfSA9IHVzZVRhYmxlKFxuICAgIHtcbiAgICAgIGNvbHVtbnMsXG4gICAgICBkYXRhLFxuICAgICAgZGVmYXVsdENvbHVtbiwgLy8gQmUgc3VyZSB0byBwYXNzIHRoZSBkZWZhdWx0Q29sdW1uIG9wdGlvblxuICAgICAgZmlsdGVyVHlwZXMsXG4gICAgfSxcbiAgICB1c2VGaWx0ZXJzLCAvLyB1c2VGaWx0ZXJzIVxuICAgIHVzZUdsb2JhbEZpbHRlciAvLyB1c2VHbG9iYWxGaWx0ZXIhXG4gICk7XG5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byByZW5kZXIgYWxsIG9mIHRoZSByb3dzIGZvciB0aGlzIGV4YW1wbGUsIHNvIGNhcFxuICAvLyBpdCBmb3IgdGhpcyB1c2UgY2FzZVxuICBjb25zdCBmaXJzdFBhZ2VSb3dzID0gcm93cy5zbGljZSgwLCBNQVhfSVRFTVMpO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDx0YWJsZSB7Li4uZ2V0VGFibGVQcm9wcygpfT5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIHtoZWFkZXJHcm91cHMubWFwKChoZWFkZXJHcm91cCkgPT4gKFxuICAgICAgICAgICAgPHRyIHsuLi5oZWFkZXJHcm91cC5nZXRIZWFkZXJHcm91cFByb3BzKCl9PlxuICAgICAgICAgICAgICB7aGVhZGVyR3JvdXAuaGVhZGVycy5tYXAoKGNvbHVtbikgPT4gKFxuICAgICAgICAgICAgICAgIDx0aCB7Li4uY29sdW1uLmdldEhlYWRlclByb3BzKCl9PlxuICAgICAgICAgICAgICAgICAge2NvbHVtbi5yZW5kZXIoXCJIZWFkZXJcIil9XG4gICAgICAgICAgICAgICAgICB7LyogUmVuZGVyIHRoZSBjb2x1bW5zIGZpbHRlciBVSSAqL31cbiAgICAgICAgICAgICAgICAgIDxkaXY+e2NvbHVtbi5jYW5GaWx0ZXIgPyBjb2x1bW4ucmVuZGVyKFwiRmlsdGVyXCIpIDogbnVsbH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgKSl9XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoXG4gICAgICAgICAgICAgIGNvbFNwYW49e3Zpc2libGVDb2x1bW5zLmxlbmd0aH1cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IFwibGVmdFwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8R2xvYmFsRmlsdGVyXG4gICAgICAgICAgICAgICAgcHJlR2xvYmFsRmlsdGVyZWRSb3dzPXtwcmVHbG9iYWxGaWx0ZXJlZFJvd3N9XG4gICAgICAgICAgICAgICAgZ2xvYmFsRmlsdGVyPXtzdGF0ZS5nbG9iYWxGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgc2V0R2xvYmFsRmlsdGVyPXtzZXRHbG9iYWxGaWx0ZXJ9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keSB7Li4uZ2V0VGFibGVCb2R5UHJvcHMoKX0+XG4gICAgICAgICAge2ZpcnN0UGFnZVJvd3MubWFwKChyb3csIGkpID0+IHtcbiAgICAgICAgICAgIHByZXBhcmVSb3cocm93KTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDx0ciB7Li4ucm93LmdldFJvd1Byb3BzKCl9PlxuICAgICAgICAgICAgICAgIHtyb3cuY2VsbHMubWFwKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8dGQgey4uLmNlbGwuZ2V0Q2VsbFByb3BzKCl9PntjZWxsLnJlbmRlcihcIkNlbGxcIil9PC90ZD5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxiciAvPlxuICAgICAgPGRpdj5TaG93aW5nIHRoZSBmaXJzdCAyMCByZXN1bHRzIG9mIHtyb3dzLmxlbmd0aH0gcm93czwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPHByZT5cbiAgICAgICAgICA8Y29kZT57SlNPTi5zdHJpbmdpZnkoc3RhdGUuZmlsdGVycywgbnVsbCwgMil9PC9jb2RlPlxuICAgICAgICA8L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgY29uc3QgRmlsdGVyVGFibGVXcmFwcGVyID0gKHtjb2x1bW5zID0gW10sIGRhdGEgPSBbXX0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVzPlxuICAgICAgPFRhYmxlIGNvbHVtbnM9e2NvbHVtbnN9IGRhdGE9e2RhdGF9IC8+XG4gICAgPC9TdHlsZXM+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgRmlsdGVyVGFibGUgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbHVtbnMgPSB1c2VNZW1vKFxuICAgICgpID0+IFtcbiAgICAgIHtcbiAgICAgICAgSGVhZGVyOiBcIk5hbWVcIixcbiAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEhlYWRlcjogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICBhY2Nlc3NvcjogXCJmaXJzdE5hbWVcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEhlYWRlcjogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgIGFjY2Vzc29yOiBcImxhc3ROYW1lXCIsXG4gICAgICAgICAgICAvLyBVc2Ugb3VyIGN1c3RvbSBgZnV6enlUZXh0YCBmaWx0ZXIgb24gdGhpcyBjb2x1bW5cbiAgICAgICAgICAgIGZpbHRlcjogXCJmdXp6eVRleHRcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgSGVhZGVyOiBcIkluZm9cIixcbiAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEhlYWRlcjogXCJBZ2VcIixcbiAgICAgICAgICAgIGFjY2Vzc29yOiBcImFnZVwiLFxuICAgICAgICAgICAgRmlsdGVyOiBTbGlkZXJDb2x1bW5GaWx0ZXIsXG4gICAgICAgICAgICBmaWx0ZXI6IFwiZXF1YWxzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBIZWFkZXI6IFwiVmlzaXRzXCIsXG4gICAgICAgICAgICBhY2Nlc3NvcjogXCJ2aXNpdHNcIixcbiAgICAgICAgICAgIEZpbHRlcjogTnVtYmVyUmFuZ2VDb2x1bW5GaWx0ZXIsXG4gICAgICAgICAgICBmaWx0ZXI6IFwiYmV0d2VlblwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgSGVhZGVyOiBcIlN0YXR1c1wiLFxuICAgICAgICAgICAgYWNjZXNzb3I6IFwic3RhdHVzXCIsXG4gICAgICAgICAgICBGaWx0ZXI6IFNlbGVjdENvbHVtbkZpbHRlcixcbiAgICAgICAgICAgIGZpbHRlcjogXCJpbmNsdWRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgSGVhZGVyOiBcIlByb2ZpbGUgUHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIGFjY2Vzc29yOiBcInByb2dyZXNzXCIsXG4gICAgICAgICAgICBGaWx0ZXI6IFNsaWRlckNvbHVtbkZpbHRlcixcbiAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyR3JlYXRlclRoYW4sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IGRhdGEgPSB1c2VNZW1vKCgpID0+IG1ha2VEYXRhKDEwMDAwMCksIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZXM+XG4gICAgICA8VGFibGUgY29sdW1ucz17Y29sdW1uc30gZGF0YT17ZGF0YX0gLz5cbiAgICA8L1N0eWxlcz5cbiAgKTtcbn07XG4iXX0=*/
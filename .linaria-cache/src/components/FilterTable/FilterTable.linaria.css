.s1cxy1dy{padding:1rem;}.s1cxy1dy table{border-spacing:0;border:1px solid black;}.s1cxy1dy table tr:last-child td{border-bottom:0;}.s1cxy1dy table th,.s1cxy1dy table td{margin:0;padding:0.5rem;border-bottom:1px solid black;border-right:1px solid black;}.s1cxy1dy table th:last-child,.s1cxy1dy table td:last-child{border-right:0;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb21wb25lbnRzL0ZpbHRlclRhYmxlL0ZpbHRlclRhYmxlLmpzIl0sIm5hbWVzIjpbIi5zMWN4eTFkeSJdLCJtYXBwaW5ncyI6IkFBV01BIiwiZmlsZSI6InNyYy9jb21wb25lbnRzL0ZpbHRlclRhYmxlL0ZpbHRlclRhYmxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZU1lbW99IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gXCJsaW5hcmlhL3JlYWN0XCI7XG5pbXBvcnQge1xuICB1c2VUYWJsZSxcbiAgdXNlRmlsdGVycyxcbiAgdXNlR2xvYmFsRmlsdGVyLFxufSBmcm9tIFwicmVhY3QtdGFibGVcIjtcbmltcG9ydCB7U2xpZGVyQ29sdW1uRmlsdGVyLCBOdW1iZXJSYW5nZUNvbHVtbkZpbHRlciwgU2VsZWN0Q29sdW1uRmlsdGVyLCBmaWx0ZXJHcmVhdGVyVGhhbiwgR2xvYmFsRmlsdGVyLCBmdXp6eVRleHRGaWx0ZXJGbiwgRGVmYXVsdENvbHVtbkZpbHRlcn0gZnJvbSAnLi9maWx0ZXJzJztcblxuaW1wb3J0IG1ha2VEYXRhIGZyb20gXCIuL21ha2VEYXRhXCI7XG5cbmNvbnN0IFN0eWxlcyA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDFyZW07XG5cbiAgdGFibGUge1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuXG4gICAgdHIge1xuICAgICAgOmxhc3QtY2hpbGQge1xuICAgICAgICB0ZCB7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoLFxuICAgIHRkIHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHBhZGRpbmc6IDAuNXJlbTtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjaztcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xuXG4gICAgICA6bGFzdC1jaGlsZCB7XG4gICAgICAgIGJvcmRlci1yaWdodDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cblxuLy8gTGV0IHRoZSB0YWJsZSByZW1vdmUgdGhlIGZpbHRlciBpZiB0aGUgc3RyaW5nIGlzIGVtcHR5XG4vL2Z1enp5VGV4dEZpbHRlckZuLmF1dG9SZW1vdmUgPSB2YWwgPT4gIXZhbFxuXG4vLyBPdXIgdGFibGUgY29tcG9uZW50XG5mdW5jdGlvbiBUYWJsZSh7Y29sdW1ucywgZGF0YX0pIHtcbiAgY29uc3QgZmlsdGVyVHlwZXMgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAvLyBBZGQgYSBuZXcgZnV6enlUZXh0RmlsdGVyRm4gZmlsdGVyIHR5cGUuXG4gICAgICBmdXp6eVRleHQ6IGZ1enp5VGV4dEZpbHRlckZuLFxuICAgICAgLy8gT3IsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHRleHQgZmlsdGVyIHRvIHVzZVxuICAgICAgLy8gXCJzdGFydFdpdGhcIlxuICAgICAgdGV4dDogKHJvd3MsIGlkLCBmaWx0ZXJWYWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gcm93cy5maWx0ZXIoKHJvdykgPT4ge1xuICAgICAgICAgIGNvbnN0IHJvd1ZhbHVlID0gcm93LnZhbHVlc1tpZF07XG5cbiAgICAgICAgICByZXR1cm4gcm93VmFsdWUgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gU3RyaW5nKHJvd1ZhbHVlKVxuICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAuc3RhcnRzV2l0aChTdHJpbmcoZmlsdGVyVmFsdWUpLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICA6IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IGRlZmF1bHRDb2x1bW4gPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAvLyBMZXQncyBzZXQgdXAgb3VyIGRlZmF1bHQgRmlsdGVyIFVJXG4gICAgICBGaWx0ZXI6IERlZmF1bHRDb2x1bW5GaWx0ZXIsXG4gICAgfSksXG4gICAgW11cbiAgKTtcblxuICBjb25zdCB7XG4gICAgZ2V0VGFibGVQcm9wcyxcbiAgICBnZXRUYWJsZUJvZHlQcm9wcyxcbiAgICBoZWFkZXJHcm91cHMsXG4gICAgcm93cyxcbiAgICBwcmVwYXJlUm93LFxuICAgIHN0YXRlLFxuICAgIHZpc2libGVDb2x1bW5zLFxuICAgIHByZUdsb2JhbEZpbHRlcmVkUm93cyxcbiAgICBzZXRHbG9iYWxGaWx0ZXIsXG4gIH0gPSB1c2VUYWJsZShcbiAgICB7XG4gICAgICBjb2x1bW5zLFxuICAgICAgZGF0YSxcbiAgICAgIGRlZmF1bHRDb2x1bW4sIC8vIEJlIHN1cmUgdG8gcGFzcyB0aGUgZGVmYXVsdENvbHVtbiBvcHRpb25cbiAgICAgIGZpbHRlclR5cGVzLFxuICAgIH0sXG4gICAgdXNlRmlsdGVycywgLy8gdXNlRmlsdGVycyFcbiAgICB1c2VHbG9iYWxGaWx0ZXIgLy8gdXNlR2xvYmFsRmlsdGVyIVxuICApO1xuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gcmVuZGVyIGFsbCBvZiB0aGUgcm93cyBmb3IgdGhpcyBleGFtcGxlLCBzbyBjYXBcbiAgLy8gaXQgZm9yIHRoaXMgdXNlIGNhc2VcbiAgY29uc3QgZmlyc3RQYWdlUm93cyA9IHJvd3Muc2xpY2UoMCwgMTApO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDx0YWJsZSB7Li4uZ2V0VGFibGVQcm9wcygpfT5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIHtoZWFkZXJHcm91cHMubWFwKChoZWFkZXJHcm91cCkgPT4gKFxuICAgICAgICAgICAgPHRyIHsuLi5oZWFkZXJHcm91cC5nZXRIZWFkZXJHcm91cFByb3BzKCl9PlxuICAgICAgICAgICAgICB7aGVhZGVyR3JvdXAuaGVhZGVycy5tYXAoKGNvbHVtbikgPT4gKFxuICAgICAgICAgICAgICAgIDx0aCB7Li4uY29sdW1uLmdldEhlYWRlclByb3BzKCl9PlxuICAgICAgICAgICAgICAgICAge2NvbHVtbi5yZW5kZXIoXCJIZWFkZXJcIil9XG4gICAgICAgICAgICAgICAgICB7LyogUmVuZGVyIHRoZSBjb2x1bW5zIGZpbHRlciBVSSAqL31cbiAgICAgICAgICAgICAgICAgIDxkaXY+e2NvbHVtbi5jYW5GaWx0ZXIgPyBjb2x1bW4ucmVuZGVyKFwiRmlsdGVyXCIpIDogbnVsbH08L2Rpdj5cbiAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgKSl9XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoXG4gICAgICAgICAgICAgIGNvbFNwYW49e3Zpc2libGVDb2x1bW5zLmxlbmd0aH1cbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IFwibGVmdFwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8R2xvYmFsRmlsdGVyXG4gICAgICAgICAgICAgICAgcHJlR2xvYmFsRmlsdGVyZWRSb3dzPXtwcmVHbG9iYWxGaWx0ZXJlZFJvd3N9XG4gICAgICAgICAgICAgICAgZ2xvYmFsRmlsdGVyPXtzdGF0ZS5nbG9iYWxGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgc2V0R2xvYmFsRmlsdGVyPXtzZXRHbG9iYWxGaWx0ZXJ9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keSB7Li4uZ2V0VGFibGVCb2R5UHJvcHMoKX0+XG4gICAgICAgICAge2ZpcnN0UGFnZVJvd3MubWFwKChyb3csIGkpID0+IHtcbiAgICAgICAgICAgIHByZXBhcmVSb3cocm93KTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDx0ciB7Li4ucm93LmdldFJvd1Byb3BzKCl9PlxuICAgICAgICAgICAgICAgIHtyb3cuY2VsbHMubWFwKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8dGQgey4uLmNlbGwuZ2V0Q2VsbFByb3BzKCl9PntjZWxsLnJlbmRlcihcIkNlbGxcIil9PC90ZD5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxiciAvPlxuICAgICAgPGRpdj5TaG93aW5nIHRoZSBmaXJzdCAyMCByZXN1bHRzIG9mIHtyb3dzLmxlbmd0aH0gcm93czwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPHByZT5cbiAgICAgICAgICA8Y29kZT57SlNPTi5zdHJpbmdpZnkoc3RhdGUuZmlsdGVycywgbnVsbCwgMil9PC9jb2RlPlxuICAgICAgICA8L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgY29uc3QgRmlsdGVyVGFibGVXcmFwcGVyID0gKHtjb2x1bW5zID0gW10sIGRhdGEgPSBbXX0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVzPlxuICAgICAgPFRhYmxlIGNvbHVtbnM9e2NvbHVtbnN9IGRhdGE9e2RhdGF9IC8+XG4gICAgPC9TdHlsZXM+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgRmlsdGVyVGFibGUgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbHVtbnMgPSB1c2VNZW1vKFxuICAgICgpID0+IFtcbiAgICAgIHtcbiAgICAgICAgSGVhZGVyOiBcIk5hbWVcIixcbiAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEhlYWRlcjogXCJGaXJzdCBOYW1lXCIsXG4gICAgICAgICAgICBhY2Nlc3NvcjogXCJmaXJzdE5hbWVcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEhlYWRlcjogXCJMYXN0IE5hbWVcIixcbiAgICAgICAgICAgIGFjY2Vzc29yOiBcImxhc3ROYW1lXCIsXG4gICAgICAgICAgICAvLyBVc2Ugb3VyIGN1c3RvbSBgZnV6enlUZXh0YCBmaWx0ZXIgb24gdGhpcyBjb2x1bW5cbiAgICAgICAgICAgIGZpbHRlcjogXCJmdXp6eVRleHRcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgSGVhZGVyOiBcIkluZm9cIixcbiAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEhlYWRlcjogXCJBZ2VcIixcbiAgICAgICAgICAgIGFjY2Vzc29yOiBcImFnZVwiLFxuICAgICAgICAgICAgRmlsdGVyOiBTbGlkZXJDb2x1bW5GaWx0ZXIsXG4gICAgICAgICAgICBmaWx0ZXI6IFwiZXF1YWxzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBIZWFkZXI6IFwiVmlzaXRzXCIsXG4gICAgICAgICAgICBhY2Nlc3NvcjogXCJ2aXNpdHNcIixcbiAgICAgICAgICAgIEZpbHRlcjogTnVtYmVyUmFuZ2VDb2x1bW5GaWx0ZXIsXG4gICAgICAgICAgICBmaWx0ZXI6IFwiYmV0d2VlblwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgSGVhZGVyOiBcIlN0YXR1c1wiLFxuICAgICAgICAgICAgYWNjZXNzb3I6IFwic3RhdHVzXCIsXG4gICAgICAgICAgICBGaWx0ZXI6IFNlbGVjdENvbHVtbkZpbHRlcixcbiAgICAgICAgICAgIGZpbHRlcjogXCJpbmNsdWRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgSGVhZGVyOiBcIlByb2ZpbGUgUHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIGFjY2Vzc29yOiBcInByb2dyZXNzXCIsXG4gICAgICAgICAgICBGaWx0ZXI6IFNsaWRlckNvbHVtbkZpbHRlcixcbiAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyR3JlYXRlclRoYW4sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IGRhdGEgPSB1c2VNZW1vKCgpID0+IG1ha2VEYXRhKDEwMDAwMCksIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZXM+XG4gICAgICA8VGFibGUgY29sdW1ucz17Y29sdW1uc30gZGF0YT17ZGF0YX0gLz5cbiAgICA8L1N0eWxlcz5cbiAgKTtcbn07XG4iXX0=*/